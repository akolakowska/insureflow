name: Build and deploy Next.js app to Azure Web App - insureflow-dashboard-app

on:
  push:
    branches:
      - feature/insureflow_frontend_azure
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build Next.js app (standalone)
        run: npm run build

      - name: Prepare deployment package
        run: |
          # Create a clean deployment directory
          mkdir -p deploy
          
          # Create .env file with environment variables
          cat > .next/standalone/.env << 'EOL'
          NODE_ENV=production
          EOL
          
          # Backup original server.js
          cp .next/standalone/server.js .next/standalone/original-server.js
          
          # Create a modified server.js with CSS fixes directly embedded
          cat > .next/standalone/server.js << 'EOL'
          // Patched server.js for CSS handling
          const fs = require('fs');
          const path = require('path');
          const http = require('http');
          
          // Set environment variables
          process.env.NODE_ENV = 'production';
          
          // Debug information
          console.log('Starting Next.js in production mode');
          console.log('Current directory:', process.cwd());
          console.log('Directory contents:', fs.readdirSync('.'));
          console.log('.next exists:', fs.existsSync('.next'));
          
          // Patch HTTP server to log requests and fix MIME types
          const originalCreateServer = http.createServer;
          http.createServer = function(...args) {
            const server = originalCreateServer.apply(this, args);
            
            // Store original request listener
            const originalListeners = server.listeners('request');
            if (originalListeners.length > 0) {
              const originalListener = originalListeners[0];
              server.removeAllListeners('request');
              
              // Add our patched listener
              server.on('request', (req, res) => {
                console.log('Request:', req.method, req.url);
                
                // Set proper MIME types for CSS files
                if (req.url.endsWith('.css')) {
                  res.setHeader('Content-Type', 'text/css');
                }
                
                // Call original listener
                return originalListener(req, res);
              });
            }
            
            return server;
          };
          
          // Load the original server code (excluding HTTP patching)
          require('./original-server.js');
          EOL
          
          # Copy all files from standalone to deploy
          cp -r .next/standalone/* deploy/
          
          # Create proper .next directory structure
          mkdir -p deploy/.next
          cp -r .next/static deploy/.next/
          
          # Copy Build ID
          cp .next/BUILD_ID deploy/.next/
          
          # Copy required configuration files
          find .next -maxdepth 1 -name "*.json" -exec cp {} deploy/.next/ \;
          
          # Copy public directory
          cp -r public deploy/
          
          # Create a next.config.js in the deploy directory to ensure correct asset paths
          cat > deploy/next.config.js << 'EOL'
          module.exports = {
            output: 'standalone',
            poweredByHeader: false,
            reactStrictMode: true,
            swcMinify: true
          };
          EOL
          
          # List deployment structure
          echo "Deployment structure (directories):"
          find deploy -type d | sort
          
          # List CSS files
          echo "CSS files in deployment:"
          find deploy -name "*.css" | sort

      - name: Zip deployment package
        run: |
          cd deploy
          zip -r ../release.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          include-hidden-files: true

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip deployment package
        run: unzip release.zip

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'insureflow-dashboard-app'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_7E95D2038D794DFEB25E3F14A04E81B2 }}
